<project name = "expression-evaluator" default="dist">

    <property file ="build.properties"></property>

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura-2.0.1.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

    <target name = "clear">
        <delete dir="build/"></delete>
    </target>

    <target name="compile" depends="init">
        <javac srcdir="src" destdir="${classes}" includeAntRuntime="false" debug="yes" debuglevel="vars,lines,source"></javac>
    </target>

    <target name="testCompile" depends="compile">
        <javac srcdir="test" destdir="${testClasses}" includeAntRuntime="false" classpath="${jarPath};${classes}" debug="yes" debuglevel="vars,lines,source"></javac>
    </target>


    <target name="createJar" depends="runTest">
        <mkdir dir="build/dist/"></mkdir>
        <mkdir dir="build/dist/lib"></mkdir>
        <mkdir dir="build/dist/bin"></mkdir>
        <jar destfile = "build/dist/lib/expression-evaluator.jar" basedir="${classes}"/>
        <copy file="shell-scripts/jel.sh" tofile="build/dist/bin/jel.sh"></copy>
        <copy file="README.md" tofile="build/dist/README.md"></copy>
        <copy file="RELEASE_NOTES" tofile="build/dist/RELEASE_NOTES"></copy>
    </target>

    <target name="dist" depends="createJar">
        <zip destfile = "build/expression-evaluator.zip" basedir = "build/dist" update = "true"/>
        <delete dir = "build/dist"/>
    </target>

    <target name="init">
        <mkdir dir = "${base}"/>
        <mkdir dir = "${lib}"/>
        <mkdir dir = "${bin}"/>
        <mkdir dir="${testClasses}"></mkdir>
        <copydir src="shell-scripts" dest="${bin}">
        </copydir>
        <copy file = "README.md" tofile = "build/expression-evaluator/README.md"/>
        <mkdir dir="${classes}" />
        <mkdir dir="${instrumented.dir}" />
        <mkdir dir="${reports.xml.dir}" />
        <mkdir dir="${reports.html.dir}" />
        <mkdir dir="${coverage.xml.dir}" />
        <mkdir dir="${coverage.summaryxml.dir}" />
        <mkdir dir="${coverage.html.dir}" />
    </target>


    <target name="instrument" depends="init,compile">
        <delete file="cobertura.ser"/>
        <delete dir="${instrumented.dir}" />
        <cobertura-instrument todir="${instrumented.dir}">
            <fileset dir="${classes}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="runTest" depends="testCompile,init">
        <junit haltonfailure="yes" fork="yes" dir="." failureProperty="test.failed">
            <classpath>
                <pathelement location="build/instrumented"/>
                <pathelement location="${classes}" />
                <pathelement location="${testClasses}" />
                <pathelement location="${jarPath}"/>
            </classpath>

            <classpath refid= "cobertura.classpath"/>
            <formatter type="xml" />
            <test name="testcase" todir="build/reports/junit-xml" if="testcase" />

            <batchtest todir="build/reports/junit-xml" unless="testcase">
                <fileset dir="test">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
            <formatter type = "brief" usefile = "false"/>
        </junit>
        <junitreport todir="build/reports/junit-xml">
            <fileset dir="build/reports/junit-xml">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="build/reports/junit-html" />
        </junitreport>
    </target>

    <target name="coverage-check">
        <cobertura-check branchrate="34" totallinerate="100" />
    </target>

    <target name="coverage-report">
        <cobertura-report srcdir="${src}" destdir="${coverage.xml.dir}" format="xml" />
    </target>

    <target name="summary-coverage-report">
        <cobertura-report srcdir="${src}" destdir="${coverage.summaryxml.dir}" format="summaryXml" />
    </target>

    <target name="alternate-coverage-report">
        <cobertura-report destdir="${coverage.html.dir}">
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>

    <target name="coverage" depends="compile,instrument,runTest,coverage-report,summary-coverage-report,alternate-coverage-report"
            description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>
</project>
